use bincode::Options;
use chain::Transaction;
use nanomsg::{Protocol, Socket};

use serde::{Deserialize, Serialize};
use serde_big_array::BigArray;
use serde_json::json;
use serialization::deserialize;
use std::io::{Read};
use std::net::Ipv4Addr;


use std::env;

//const SERVER_DEVICE_URL: &'static str = "tcp://195.201.20.230:13344";
const FIRST_PARTY: [&str; 63] = [
    "blackice_DEV",
    "blackice_AR",
    "alien_EU",
    "alien_NA",
    "alien_SH",
    "alienx_EU",
    "alienx_NA",
    "artem.pikulin_AR",
    "artem.pikulin_DEV",
    "blackice_EU",
    "chmex_AR",
    "chmex_EU",
    "chmex_NA",
    "chmex_SH",
    "chmex1_SH",
    "cipi_1_EU",
    "cipi_2_EU",
    "cipi_AR",
    "cipi_NA",
    "computergenie_EU",
    "computergenie_NA",
    "dimxy_AR",
    "dimxy_DEV",
    "dragonhound_NA",
    "fediakash_AR",
    "gcharang_DEV",
    "gcharang_SH",
    "goldenman_AR",
    "kolo_EU",
    "kolox_AR",
    "komodopioneers_EU",
    "madmax_DEV",
    "marmarachain_EU",
    "mcrypt_AR",
    "mcrypt_SH",
    "metaphilibert_SH",
    "mylo_NA",
    "mylo_SH",
    "nodeone_NA",
    "nutellalicka_AR",
    "nutellalicka_SH",
    "ocean_AR",
    "pbca26_NA",
    "pbca26_SH",
    "phit_SH",
    "ptyx_NA",
    "ptyx2_NA",
    "sheeba_SH",
    "smdmitry_AR",
    "smdmitry_EU",
    "smdmitry_SH",
    "strob_SH",
    "strobnidan_SH",
    "tokel_NA",
    "tonyl_AR",
    "tonyl_DEV",
    "van_EU",
    "webworker01_EU",
    "webworker01_NA",
    "who-biz_NA",
    "yurii-khi_DEV",
    "ca333_EU",
    "dragonhound_DEV",
];

/*
const CLIENT_DEVICE_URL: &'static str = "tcp://95.217.87.135:13344";
const MY_DEVICE_IN: &'static str = "tcp://195.201.20.230:27773";
const MY_DEVICE_OUT: &'static str = "tcp://195.201.137.5:27773";
*/

const DPOW_SIGCHANNEL: u32 = b's' as u32 | (b'i' as u32) << 8 | (b'g' as u32) << 16 | (b's' as u32) << 24;
const DPOW_SIGBTCCHANNEL: u32 = !DPOW_SIGCHANNEL;
const DPOW_TXIDCHANNEL: u32 = b't' as u32 | (b'x' as u32) << 8 | (b'i' as u32) << 16 | (b'd' as u32) << 24;
const DPOW_BTCTXIDCHANNEL: u32 = !DPOW_TXIDCHANNEL;


#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[repr(C)]
struct IguanaPacketHeader {
    sigr: [u8; 32],
    sigs: [u8; 32],
    packethash: [u8; 32],
    nonce: u32,
    packetlen: u32,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[repr(C)]
struct DpowNanoUtxo {
    srcutxo: [u8; 32],
    destutxo: [u8; 32],
    bestmask: [u8; 8],
    recvmask: [u8; 8],
    pendingcrc1: u32,
    pendingcrc2: u32,
    paxwdcrc: u32,
    srcvout: u16,
    destvout: u16,
    #[serde(with = "BigArray")]
    sig1: [u8; 128],
    #[serde(with = "BigArray")]
    sig2: [u8; 128],
    siglens: [u8; 2],
    pad: u8,
    bestk: u8,
}


#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[repr(C)]
struct DpowNanoMsgHdr {
    srchash: [u8; 32],
    desthash: [u8; 32],
    ratify: DpowNanoUtxo,
    notarize: DpowNanoUtxo,
    channel: u32,
    height: u32,
    size: u32,
    datalen: u32,
    crc32: u32,
    myipbits: [u8; 4],
    numipbits: u32,
    #[serde(with = "BigArray")]
    ipbits: [u32; 512],
    symbol: [u8; 16],
    senderind: u8,
    senderind2: u8,
    version1: u8,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
#[repr(C)]
struct dpow_sigentry {
    beacon: [u8; 32],
    mask:  [u8; 8],
    refcount: i32,
    senderind: u8,
    lastk: u8,
    siglen: u8,
    #[serde(with = "BigArray")]
    sig: [u8; 128],
    #[serde(with = "BigArray")]
    senderpub: [u8; 33]
}

fn print_hex(bytes: &[u8]) {
    for b in bytes {
        print!("{:02X}", b);
    }
    println!("");
}

//https://stackoverflow.com/questions/68583968/how-to-deserialize-a-c-struct-into-a-rust-struct
fn main() {
    let args: Vec<String> = env::args().collect();
    let server_url = &args[1];

    let mut ips = json!({});
    let binconf = bincode::DefaultOptions::new().with_fixint_encoding(); //.allow_trailing_bytes();

    let mut in_socket = Socket::new(Protocol::Bus).unwrap();
    let _in_endpoint = in_socket.bind(server_url).unwrap();

    let mut buffer = vec![];
    loop {
    //'outer: loop {
        match in_socket.read_to_end(&mut buffer) {
            Ok(_mysize) => {
                loop {
                    if buffer.len() == 0 {
                        break;
                    };
                    /*
                    let header: IguanaPacketHeader = binconf.deserialize(&buffer[..104]).unwrap();
                    buffer = buffer[104..].to_vec();

                    let cursor = std::mem::size_of::<DpowNanoMsgHdr>() - 1;
                    let dpow_msg: DpowNanoMsgHdr = binconf.deserialize(&buffer[..cursor]).unwrap();
                    ips[format!("{}", FIRST_PARTY[dpow_msg.senderind as usize - 1])] =
                        format!("{}", Ipv4Addr::from(u32::from_be_bytes(dpow_msg.myipbits))).into();
                    println!("{}", ips);

                    let _txidtx = match header.packetlen {
                        _cursor => None,
                        _ => {
                            let txid: [u8; 32] =
                                binconf.deserialize(&buffer[cursor..cursor + 32]).unwrap();
                            // will fail for non-standard UTXO coins - need serialization exceptions for
                            let tx: Transaction = deserialize(
                                &buffer[cursor + 32..(header.packetlen as usize)] as &[u8],
                            )
                            .unwrap();
                            println!("txid {}", std::str::from_utf8(&txid).unwrap());
                            Some(TxidTx { txid: txid, tx })
                        }
                    };
                    buffer = buffer[header.packetlen as usize..].to_vec();
                    */

                println!("full header");
                print_hex(&buffer);

                let _header: IguanaPacketHeader = binconf.deserialize(&buffer[..104]).unwrap();
                buffer = buffer[104..].to_vec();
                let msg_size = std::mem::size_of::<DpowNanoMsgHdr>()-1;
                let dpow_msg: DpowNanoMsgHdr = binconf.deserialize(&buffer[..msg_size]).unwrap();

                buffer = buffer[msg_size..].to_vec();

                println!("{} {}", FIRST_PARTY[dpow_msg.senderind as usize - 1], Ipv4Addr::from(u32::from_be_bytes(dpow_msg.myipbits)));


                let extra = &buffer[..dpow_msg.datalen as usize];

                match dpow_msg.channel {
                    DPOW_SIGCHANNEL => println!("DpowSigchannel"),
                    DPOW_SIGBTCCHANNEL => println!("DpowSigbtcchannel"),
                    DPOW_TXIDCHANNEL => println!("DpowTxidchannel"),
                    DPOW_BTCTXIDCHANNEL => println!("DpowBtctxidchannel"),
                    _=> println!("Null channel"),
                }

                if extra.len() != 0 {
                    println!("dpow_msg channel {}", dpow_msg.channel);
                    print_hex(&extra);
                }

                buffer = buffer[dpow_msg.datalen as usize..].to_vec();

                
                


                }
            }
            Err(err) => {
                println!("Client failed to receive msg '{}'.", err);
                break;
            }
        }
    }
}

#[test]
fn test_extra_data() {
    use bincode::Options;
    use rustc_hex::{FromHex};
    use serialization::deserialize;
    use std::mem;
    let binconf = bincode::DefaultOptions::new().with_fixint_encoding(); //.allow_trailing_bytes();
    let packet_hex = "".to_string();
    let mut buffer = packet_hex.from_hex::<Vec<u8>>().unwrap();

    let header: IguanaPacketHeader = binconf.deserialize(&buffer[..104]).unwrap();
    buffer = buffer[104..].to_vec();

    let cursor = mem::size_of::<DpowNanoMsgHdr>() - 1;
    let _dpow_msg: DpowNanoMsgHdr = binconf.deserialize(&buffer[..cursor]).unwrap();

    let _txidtx = match header.packetlen as usize {
        cursor => {
            let txid: [u8; 32] = binconf.deserialize(&buffer[cursor..cursor + 32]).unwrap();
            let tx: Transaction =
                deserialize(&buffer[cursor + 32..(header.packetlen as usize)] as &[u8]).unwrap();
            Some(TxidTx { txid: txid, tx })
        }
        _ => None,
    };
    //        println!("payload {}", &buffer[cursor..(header.packetlen as usize)].to_hex::<String>());

    buffer = buffer[header.packetlen as usize..].to_vec();

    println!("remaining buf {:?}", buffer);
}

#[test]
fn test_real() {
    use bincode::Options;
    use rustc_hex::{_ips};
    use serialization::deserialize;
    let buf_hex = "35536c5065b8bdbd66f9435b8b396a7c68f36216b69d0b2a764a116b3320f17c0c899081fc26d6659060963e1458da9f204de80fa0491520da059b14ca6da93c00b5efe19b1ecbacb1203fa414e5078195a5d31ec1992eb0e0e27ed8439ff60f76000000370b0000b3c168ed4acd96594288cee3114c77de51b6afe1ab6a866887a13a96ee80f33c4f2f8c06f7598827b16e4ce3ca5bc7ec082dd87e6fcd510b1fc993658605d8cd25cedcaa5ba4f7e46485abaeb1450230f5c392cd2509828f89ff1187d654e338670bee52ae8639a1aae08fa326a379ad994fb31af03f1b617054dbdff00000000737c0600370b0000000000000000000068eedd3d49000000bc22bb005bc1b502b29f0203b29f02058b2dfb06b29f0207b29f0208334fe4082e11630c50d1f211334f6316c6f4c81633a1c417b23f431d33a1c41dc6f4c81dbcf6e01d33a1c4214df44b278b637932b1369332b1369c34953811398b63793b68eedd3d8794ab4a3351384ca237055352cae65452cae6558b63d064362785698ac9cf734d4ac574550ac275bcf6e0754d4ac5769e45127a36271c7b0feb52845fd95787879436896732218a34812c8a4d4b798b5c35418d8b63d08dc77f3c8e33a1838f36251e97bc8f8c9a87b5dfa45fd991a65fa35aa95fa35aab5fa35aad33a1c4b0023899b642f8ccbab00908bbbc864abc67d8dfc18b63efc9a23758e34e2e17e4b9c07ceb8b6390f052cae6f8a772c5fa33a1cdfa52cae6fa52cae6fb52cae6fcd494c000000000000000000000000003f8217".to_string();
    //let mut buffer = buf_hex.from_hex::<Vec<u8>>().unwrap();

    let mut buffer = [167, 242, 47, 237, 99, 95, 24, 156, 185, 35, 102, 253, 186, 48, 189, 77, 142, 21, 184, 216, 0, 180, 156, 230, 21, 175, 175, 53, 139, 249, 173, 231, 89, 131, 135, 104, 167, 72, 107, 235, 81, 80, 252, 168, 22, 151, 84, 157, 25, 3, 122, 69, 226, 105, 37, 67, 129, 113, 248, 249, 90, 251, 118, 133, 0, 135, 161, 74, 58, 163, 214, 181, 22, 6, 41, 26, 6, 132, 164, 136, 46, 122, 223, 39, 212, 97, 68, 60, 240, 87, 211, 66, 239, 251, 80, 151, 196, 2, 0, 0, 151, 17, 0, 0, 167, 237, 214, 208, 186, 24, 137, 96, 227, 158, 206, 212, 214, 180, 202, 105, 70, 189, 152, 50, 58, 180, 12, 188, 19, 214, 229, 38, 150, 222, 125, 196, 207, 70, 208, 219, 163, 183, 95, 177, 50, 241, 173, 86, 212, 76, 194, 231, 59, 217, 118, 229, 81, 84, 45, 145, 96, 4, 102, 77, 22, 90, 70, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 228, 46, 82, 235, 249, 11, 49, 8, 127, 185, 177, 84, 129, 214, 177, 37, 159, 84, 213, 159, 141, 140, 56, 36, 30, 125, 227, 195, 176, 84, 248, 129, 150, 164, 46, 165, 226, 145, 166, 181, 192, 9, 48, 209, 106, 80, 206, 188, 210, 153, 122, 65, 144, 47, 99, 151, 255, 243, 34, 255, 146, 136, 4, 110, 28, 16, 0, 128, 4, 4, 2, 126, 254, 127, 248, 159, 222, 15, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 139, 135, 150, 155, 208, 58, 19, 0, 151, 17, 0, 0, 96, 6, 0, 0, 107, 211, 18, 253, 95, 217, 87, 135, 79, 0, 0, 0, 188, 34, 187, 0, 91, 193, 181, 2, 178, 159, 2, 3, 178, 159, 2, 5, 139, 45, 251, 6, 178, 159, 2, 7, 178, 159, 2, 8, 51, 79, 228, 8, 46, 17, 99, 12, 80, 209, 242, 17, 51, 79, 99, 22, 198, 244, 200, 22, 51, 161, 196, 23, 178, 63, 67, 29, 51, 161, 196, 29, 198, 244, 200, 29, 188, 246, 224, 29, 144, 48, 38, 33, 51, 161, 196, 33, 77, 244, 75, 39, 139, 99, 121, 50, 177, 54, 147, 50, 177, 54, 156, 52, 139, 99, 149, 54, 149, 56, 17, 57, 54, 39, 107, 58, 139, 99, 121, 59, 158, 69, 53, 61, 104, 238, 221, 61, 135, 148, 171, 74, 51, 81, 56, 76, 162, 55, 5, 83, 82, 202, 230, 84, 82, 202, 230, 85, 139, 99, 208, 100, 54, 39, 133, 105, 138, 201, 207, 115, 77, 74, 197, 116, 85, 10, 194, 117, 188, 246, 224, 117, 77, 74, 197, 118, 158, 69, 18, 122, 54, 39, 28, 123, 15, 235, 82, 132, 95, 217, 87, 135, 135, 148, 54, 137, 103, 50, 33, 138, 52, 129, 44, 138, 77, 75, 121, 139, 92, 53, 65, 141, 139, 99, 208, 141, 199, 127, 60, 142, 51, 161, 131, 143, 54, 37, 30, 151, 188, 143, 140, 154, 135, 181, 223, 164, 95, 217, 145, 166, 95, 163, 90, 169, 139, 99, 209, 170, 95, 163, 90, 171, 95, 163, 90, 173, 51, 161, 196, 176, 2, 56, 153, 182, 66, 248, 204, 186, 176, 9, 8, 187, 188, 134, 74, 188, 185, 150, 191, 191, 139, 99, 239, 201, 167, 235, 63, 205, 162, 55, 88, 227, 78, 46, 23, 228, 185, 192, 124, 235, 139, 99, 144, 240, 82, 202, 230, 248, 167, 114, 197, 250, 51, 161, 205, 250, 82, 202, 230, 250, 82, 202, 230, 251, 82, 202, 230, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 89, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 130, 23, 155, 43, 179, 64, 158, 83, 158, 166, 61, 199, 207, 18, 7, 78, 117, 82, 96, 123, 15, 160, 216, 139, 198, 32, 134, 154, 18, 83, 24, 208, 39, 138, 4, 0, 0, 128, 133, 32, 47, 137, 13, 240, 165, 121, 2, 65, 41, 115, 125, 121, 190, 96, 183, 179, 144, 78, 109, 184, 177, 245, 181, 236, 53, 61, 15, 194, 212, 36, 162, 29, 18, 100, 45, 20, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 147, 133, 182, 105, 46, 205, 205, 223, 176, 130, 14, 146, 81, 29, 63, 73, 221, 224, 37, 120, 12, 39, 27, 146, 248, 236, 250, 208, 199, 55, 194, 15, 2, 32, 41, 9, 108, 162, 156, 103, 81, 201, 162, 14, 231, 214, 99, 229, 44, 101, 216, 53, 50, 34, 237, 13, 192, 12, 239, 30, 17, 212, 72, 159, 144, 241, 1, 255, 255, 255, 255, 213, 20, 28, 166, 133, 174, 246, 63, 192, 19, 180, 235, 12, 87, 208, 62, 115, 170, 53, 51, 141, 162, 44, 218, 118, 154, 32, 108, 153, 33, 48, 159, 11, 0, 0, 0, 72, 71, 48, 68, 2, 32, 26, 161, 108, 48, 164, 169, 47, 237, 1, 205, 200, 177, 21, 70, 107, 94, 223, 145, 166, 42, 94, 224, 184, 125, 179, 128, 229, 232, 93, 248, 128, 202, 2, 32, 1, 38, 122, 56, 109, 127, 21, 10, 153, 214, 210, 56, 229, 22, 55, 97, 147, 45, 70, 16, 45, 6, 238, 198, 82, 41, 132, 102, 154, 107, 108, 21, 1, 255, 255, 255, 255, 34, 184, 22, 141, 168, 192, 96, 106, 118, 113, 104, 173, 107, 12, 143, 122, 194, 50, 152, 72, 191, 216, 109, 128, 46, 230, 139, 154, 0, 44, 19, 8, 8, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 227, 160, 206, 242, 200, 255, 58, 26, 54, 146, 221, 93, 116, 254, 168, 85, 48, 1, 237, 250, 154, 184, 179, 50, 230, 21, 13, 238, 175, 82, 105, 10, 2, 32, 41, 26, 120, 10, 73, 83, 153, 48, 210, 35, 143, 51, 234, 197, 113, 222, 94, 191, 203, 33, 85, 35, 93, 45, 147, 71, 238, 17, 120, 59, 122, 223, 1, 255, 255, 255, 255, 249, 139, 246, 56, 40, 145, 32, 135, 28, 173, 36, 128, 204, 242, 220, 94, 26, 206, 222, 86, 45, 171, 155, 144, 73, 18, 166, 104, 148, 230, 239, 14, 9, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 214, 51, 71, 48, 109, 20, 59, 52, 195, 171, 221, 81, 165, 59, 69, 161, 242, 172, 174, 76, 204, 182, 30, 220, 227, 229, 20, 62, 117, 14, 179, 22, 2, 32, 7, 169, 53, 144, 26, 38, 34, 243, 209, 91, 10, 193, 189, 75, 186, 47, 204, 107, 159, 148, 202, 209, 111, 208, 43, 2, 198, 218, 181, 232, 200, 73, 1, 255, 255, 255, 255, 110, 254, 54, 67, 137, 50, 185, 21, 221, 89, 5, 40, 41, 49, 12, 90, 87, 246, 2, 206, 248, 35, 156, 23, 117, 176, 209, 132, 74, 171, 188, 2, 2, 0, 0, 0, 72, 71, 48, 68, 2, 32, 120, 198, 122, 215, 236, 210, 106, 185, 4, 31, 45, 190, 134, 160, 255, 215, 93, 75, 93, 65, 106, 178, 107, 18, 146, 79, 124, 170, 230, 14, 13, 253, 2, 32, 85, 26, 13, 49, 98, 79, 116, 230, 48, 196, 215, 131, 64, 221, 123, 33, 226, 192, 23, 193, 250, 187, 238, 116, 42, 85, 35, 150, 64, 193, 95, 87, 1, 255, 255, 255, 255, 248, 136, 45, 111, 88, 21, 8, 27, 223, 92, 64, 146, 44, 214, 4, 148, 129, 29, 2, 121, 101, 229, 30, 252, 10, 112, 232, 13, 32, 175, 211, 58, 11, 0, 0, 0, 72, 71, 48, 68, 2, 32, 12, 184, 174, 119, 86, 83, 254, 219, 179, 13, 92, 80, 47, 99, 222, 117, 179, 179, 25, 254, 70, 232, 66, 83, 246, 56, 111, 230, 129, 175, 35, 246, 2, 32, 90, 215, 121, 96, 39, 98, 43, 26, 174, 79, 254, 43, 16, 27, 35, 248, 238, 36, 156, 47, 214, 77, 117, 195, 100, 119, 75, 137, 51, 245, 250, 41, 1, 255, 255, 255, 255, 12, 123, 156, 236, 37, 116, 151, 83, 227, 2, 104, 97, 186, 3, 2, 85, 80, 22, 36, 233, 64, 247, 34, 36, 159, 218, 126, 98, 248, 156, 66, 107, 2, 0, 0, 0, 72, 71, 48, 68, 2, 32, 83, 171, 129, 105, 141, 15, 43, 251, 177, 250, 170, 180, 99, 209, 94, 123, 200, 174, 28, 253, 120, 77, 240, 245, 219, 152, 76, 179, 236, 66, 208, 11, 2, 32, 77, 166, 91, 55, 55, 70, 16, 49, 17, 26, 228, 174, 185, 5, 244, 176, 37, 195, 14, 14, 96, 227, 153, 117, 60, 231, 236, 207, 204, 211, 186, 55, 1, 255, 255, 255, 255, 0, 54, 57, 39, 56, 66, 186, 199, 204, 91, 247, 17, 84, 201, 147, 143, 50, 165, 81, 93, 153, 227, 29, 131, 249, 148, 63, 221, 123, 125, 46, 182, 14, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 253, 252, 243, 245, 218, 64, 61, 57, 143, 230, 193, 103, 52, 58, 81, 165, 2, 37, 172, 224, 190, 100, 32, 55, 33, 205, 209, 72, 173, 67, 38, 118, 2, 32, 45, 41, 201, 145, 84, 213, 177, 114, 35, 154, 146, 12, 93, 111, 50, 153, 75, 207, 242, 30, 130, 241, 190, 213, 217, 121, 157, 229, 213, 82, 155, 87, 1, 255, 255, 255, 255, 208, 84, 245, 61, 133, 158, 40, 190, 201, 151, 161, 174, 227, 61, 3, 103, 16, 75, 3, 82, 49, 162, 181, 7, 161, 164, 199, 129, 6, 129, 114, 48, 43, 0, 0, 0, 72, 71, 48, 68, 2, 32, 5, 30, 37, 121, 134, 4, 184, 4, 251, 76, 32, 132, 176, 45, 235, 68, 159, 2, 18, 224, 165, 229, 66, 2, 152, 246, 174, 203, 196, 122, 184, 182, 2, 32, 45, 162, 60, 225, 144, 69, 186, 218, 203, 158, 120, 236, 18, 175, 123, 121, 240, 102, 197, 109, 137, 73, 74, 75, 68, 76, 40, 32, 3, 81, 81, 112, 1, 255, 255, 255, 255, 95, 104, 83, 94, 78, 252, 119, 64, 61, 208, 209, 239, 13, 27, 93, 6, 191, 230, 163, 28, 9, 62, 40, 81, 149, 238, 242, 203, 213, 97, 198, 100, 10, 0, 0, 0, 72, 71, 48, 68, 2, 32, 54, 98, 78, 194, 227, 124, 252, 28, 236, 179, 25, 221, 108, 140, 85, 58, 91, 127, 146, 89, 59, 102, 88, 21, 90, 162, 230, 18, 162, 81, 195, 129, 2, 32, 64, 72, 79, 44, 69, 76, 130, 230, 128, 216, 89, 151, 252, 21, 137, 33, 108, 79, 241, 105, 33, 148, 49, 128, 234, 185, 84, 207, 175, 241, 177, 35, 1, 255, 255, 255, 255, 145, 226, 222, 220, 234, 225, 198, 68, 4, 94, 92, 143, 97, 31, 127, 133, 38, 74, 168, 173, 237, 20, 250, 98, 190, 204, 161, 48, 141, 238, 172, 162, 18, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 170, 85, 240, 23, 208, 180, 75, 232, 124, 181, 250, 169, 182, 40, 158, 244, 28, 85, 50, 6, 216, 34, 17, 164, 225, 153, 205, 152, 106, 208, 203, 255, 2, 32, 70, 217, 39, 239, 213, 188, 97, 23, 30, 101, 250, 189, 115, 121, 255, 145, 74, 230, 202, 118, 110, 123, 250, 14, 42, 90, 122, 125, 212, 114, 75, 72, 1, 255, 255, 255, 255, 76, 43, 16, 94, 37, 127, 114, 170, 137, 242, 167, 143, 61, 105, 202, 49, 154, 88, 41, 158, 61, 102, 154, 247, 212, 106, 46, 24, 151, 36, 154, 89, 3, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 233, 147, 103, 68, 193, 128, 249, 234, 119, 210, 175, 29, 23, 104, 131, 122, 207, 196, 25, 95, 5, 120, 78, 148, 111, 154, 146, 100, 176, 47, 3, 141, 2, 32, 39, 168, 39, 209, 190, 101, 196, 203, 75, 243, 62, 76, 12, 24, 105, 120, 177, 218, 177, 230, 85, 56, 77, 90, 120, 196, 31, 96, 241, 50, 154, 129, 1, 255, 255, 255, 255, 202, 164, 88, 23, 176, 9, 67, 22, 96, 139, 3, 55, 123, 254, 199, 39, 69, 249, 217, 174, 107, 34, 171, 3, 226, 206, 221, 133, 181, 89, 131, 89, 4, 0, 0, 0, 73, 72, 48, 69, 2, 33, 0, 221, 133, 87, 225, 158, 75, 75, 174, 213, 120, 133, 8, 170, 86, 131, 54, 81, 8, 151, 155, 31, 104, 36, 19, 124, 213, 111, 172, 38, 189, 224, 102, 2, 32, 102, 225, 230, 210, 120, 109, 95, 234, 146, 147, 238, 24, 0, 24, 236, 43, 231, 17, 235, 214, 250, 202, 161, 57, 230, 129, 3, 54, 98, 36, 185, 139, 1, 255, 255, 255, 255, 2, 240, 129, 1, 0, 0, 0, 0, 0, 35, 33, 2, 14, 70, 231, 154, 42, 141, 18, 185, 181, 209, 44, 122, 145, 173, 180, 228, 84, 237, 250, 228, 60, 10, 12, 184, 5, 66, 125, 42, 199, 97, 63, 217, 172, 0, 0, 0, 0, 0, 0, 0, 0, 42, 106, 40, 179, 70, 90, 22, 77, 102, 4, 96, 145, 45, 84, 81, 229, 118, 217, 59, 231, 194, 76, 212, 86, 173, 241, 50, 177, 95, 183, 163, 219, 208, 70, 207, 208, 58, 19, 0, 65, 89, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].to_vec();

    let binconf = bincode::DefaultOptions::new().with_fixint_encoding(); //.allow_trailing_bytes();

    let _header: IguanaPacketHeader = binconf.deserialize(&buffer[..104]).unwrap();
    buffer = buffer[104..].to_vec();

    let msg_size = std::mem::size_of::<DpowNanoMsgHdr>()-1;
    println!("msg_size {}", msg_size);


    let dpow_msg: DpowNanoMsgHdr = binconf.deserialize(&buffer[..msg_size]).unwrap();
    buffer = buffer[msg_size..].to_vec();

    println!("huh {:?}", dpow_msg);
    println!("extra {:?}",&buffer[..dpow_msg.datalen as usize]);
}

#[test]
fn test_txidtx_deser() {
    use bincode::Options;
    use rustc_hex::{FromHex};
    use serialization::deserialize;

    let _binconf = bincode::DefaultOptions::new().with_fixint_encoding(); //.allow_trailing_bytes();
    let buf_hex = "66492443d13439116c9f5b979633c6f3828b59e99e896d63278167562eecdd8b0400008085202f890d8e18650989c179eade65886b5a31825f9f16ad86782cad0c8e29b81f36e1ef8d080000004847304402203c6510685dd20aaff6dad73b183c8c5ea17ffb45e616192c44010cb11264093e02205887a5d31701745c1e56b5c8f454f2c44528c3bf3a1d3c140c7c77caf5b0e58601ffffffffec8afd071dec091eba337d1bc6342a1fa3a0682df28bf62c53c58053efeb5de80300000049483045022100931f267031c20d8e6a9429ce188669ffc2277aa2ad7e5e93193c029163434a050220709fc79b03a8699604d63b64286107e3f66d04ce724690d19845ccd6570c597501ffffffffcdd03e67f187bed57b483b338776c19f496b7443e92de74b65d4a3f5a7b6f4d70b0000004847304402200bd89d1e0324c25706ab03f97feeecba6b3399ae639e341b41c95c87586fa38b02201059e853dbcb050af3502ed75b60ed14898ec3bca1cc4d5369cf1d4d4a7da82601ffffffff0e314a18230ddcce9412cde387634c184f6bbcaf54361804dfcb04b331aa84d90100000049483045022100e55fe94c82917ab8111b3c38a0dfdd5c849ec58d03c8e940605031908b8d992002201f26cadd15beea6866fb5e9ee19ddbc1f7d381a8a01437ec237fb0bf5763549b01ffffffff166b4331c7a8e2a987b86ce40cfd61d809e87a1a4eed145b27609ab5d462203f0800000049483045022100ce91b2bbefc63cdac0b6fc1c513a8836d38e196e0d2eb905af9385a813832fe50220538bb27df326a07b63bd07102dc9de73df1d5ceeeb0b517ddcbb8222487e30fc01ffffffff1fcd15c7f58c25933aa6636c37d1c9828a6f70ea4e826538894f39d1003eb01d09000000494830450221009cf59562d5b87883fa06b955b808339f5bc9757ef8431582b63984e659e1bb2302206b36fd6927322a879ed0d026c98afe204090e2f6a3c01cabbca4ebfdf6724db001ffffffffdf9a1062be5a4c46faaefe1fef5a44fd1a54db7ee6193c92b1fec24787291cd9090000004847304402202df5f1ee62418023cfd940e6c178512b5916d85abe2adf6eb4353fdf84d1032e022071d89485fc0baa26c5aadaf1631352c01ef6244e47e95a819dfd0dbc5b6c02c801ffffffff93d3377bd1dbc685d16c3924f503027da3b29a17896b04f7124379138c43abfb1400000049483045022100d971090696d348b387f3b3780930fd95dc6c7dd4d401938dedeaec17bde9861d022009f5a41ba4c2cfe84b4c1de7f18bc6a67b66e6d54c20b41db3e7c29b0121db6801ffffffff1b94ee3056c5509044920f7e9bc4044dc6ffafb5cf6a8a90fc17b49fd6ed27ae0600000049483045022100e9d5ebb77aa562d203b4bee1893828c29156242a4b7b6ebbdb1041440e0f62fc02201c349c16e16cfc4765b6cee98eca164b989f0db5b655c91fa0ce6aca1b24741601ffffffff351227440693a7a9517fc723034f0730c32746f3c0a4f41912faf79eb46233cf0200000049483045022100e85a79c6d5fa7c1bb1c39273432a52032c5a0ad86406acddbfd55a745c5e817f0220388920802d97ab12259a75093601e57378eff7b21b8c0f5d57a6abdc69df798e01fffffffffc8f798d710dad056eee6430de71126eba8c1cf9f45d0acd3c7a0b49e5654ac00500000049483045022100becde9f60fa86e009c0a0d5b0b8057a35ef044fb48be3ed841d7f40b693c0e92022023aff30c56058c5dd6beff8e5f2427ad3aca60805cf6bb5a47e241e66bd967b501ffffffff6c5a77df718e461b2c59f954a081f769ee48f2366998b830af7e07ebaa2d264b0100000049483045022100e3b9da2554e0f0697cb2dfb919cfbfccbfb6f3c10e160be29108485bb3c2fc1c02207a80d6fb47ae2a143899c439bff4e59ace4858720f46c1a109fd7d62b191778001ffffffff8e3a6cf08e172a80ae61aa1cca201fc8b318a9589f494d9411dbec9fa3d529700a00000049483045022100fe27dc5af79c97d5a685b9f3420b1b2edbf322e38585f3bd4944f0fe333892a502207da298f5e682ba8afbef3c44463a11edfe0ef3a2f45ff7d1e058c3ed8e12094001ffffffff02f0810100000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac00000000000000002c6a2abc2c099591c82c7a595d084b0ab2ee57f488392b20fe642f6abe5a970000000056b60a0053465553440000000000000000000000000000000000000000".to_string();

    let buffer = buf_hex.from_hex::<Vec<u8>>().unwrap();

    let tx: Transaction = deserialize(&buffer[32..] as &[u8]).unwrap();

    //let s : Transaction = serialization::serialize(&buffer[32..])

    println!("s {:?}", tx);
    //let txidtx : TxidTx = binconf.deserialize(&buffer).unwrap();
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
struct TxidTx {
    txid: [u8; 32],
    tx: Transaction,
}

#[test]
fn test_bincode() {
    use bincode::Options;
    use rustc_hex::{FromHex};
    let binconf = bincode::DefaultOptions::new().with_fixint_encoding(); //.allow_trailing_bytes();
    let exp_hex = "1db4bb74c4a380deb176154ca1bd16ca3412a14bee8518d771d9b26d5731257423b80b567d3df2ebda084dee07dee33f9e8f59f8ddae8ab11c154adc26d9fc2b00166718fbb7657ff2a43b7fa60477745d94c12e29273b77a0575397adb2afc91d010000370b0000b3c168ed4acd96594288cee3114c77de51b6afe1ab6a866887a13a96ee80f33c00000015003a1d53e5cc0a54f30c644108a6768e3cad134f4014da68ab8caecee27e5092f4d9501a5179fde66c002dff5bc48f680442995353e0e25750f6f9378ab576154f0e64775d058041382e715ed7e5f5bebaf0696c74c5287a170000000000000000400000008000008000000000000000004894338dff0000000022480900370b0000000000000000000068eedd3d4e000000bc22bb005bc1b502b29f0203b29f02058b2dfb06b29f0207b29f0208334fe4082e11630c50d1f211334f6316c6f4c81633a1c417b23f431d33a1c41dc6f4c81dbcf6e01d9030262133a1c4214df44b278b637932b1369332b1369c348b6395369538113936276b3a8b63793b68eedd3d8794ab4a3351384ca237055352cae65452cae6558b63d064362785698ac9cf734d4ac574550ac275bcf6e0754d4ac5769e45127a36271c7b0feb52845fd95787879436896732218a34812c8a4d4b798b5c35418d8b63d08dc77f3c8e33a1838f36251e97bc8f8c9a87b5dfa45fd991a65fa35aa95fa35aab5fa35aad33a1c4b0023899b642f8ccbab00908bbbc864abcb996bfbf67d8dfc18b63efc9a23758e34e2e17e48b63bde4b9c07ceb8b6390f052cae6f8a772c5fa33a1cdfa52cae6fa52cae6fb52cae6fcf4b454c00000000000000000000003f8217".to_string();
    let packet = exp_hex.from_hex::<Vec<u8>>().unwrap();
    //let header : &iguana_packet_header = unsafe{ &*exp[..104].as_ptr().cast() };
    //println!("packet? {:?}", header);
    //println!("1 {}", &exp[..104].to_hex::<String>());
    let header_vec = &packet[..104];
    let header_safe: IguanaPacketHeader = binconf.deserialize(header_vec).unwrap();
    println!("header {:?}", header_safe);

    let pack_vec = &packet[104..(header_safe.packetlen + 104) as usize];

    let packet_safe: DpowNanoMsgHdr = binconf.deserialize(pack_vec).unwrap();
    println!("pack {:?}", packet_safe);
    //let unser = binconf.serialize(&header).unwrap();
    //println!("2 {}", unser.to_hex::<String>());
}
